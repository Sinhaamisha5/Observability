🧭 OVERALL GOAL

Design and implement a Monitoring & Alerting Architecture for 200+ microservices using:

Prometheus (metrics collection)

Alertmanager (alert routing)

Grafana (visualization)

Node Exporter / App Exporter

Nagios integration (legacy monitoring)

Service discovery (EC2 or Kubernetes)

Security hardening

GitOps automation for dashboards

🧩 Phase 1 — Base Setup: EC2 + Prometheus + Node Exporter
🎯 Objective

Install Prometheus and Node Exporter on your EC2 to start collecting host-level metrics.

🔧 Steps

Create folder structure

mkdir -p ~/monitoring-stack/{prometheus,grafana,alertmanager,exporters}
cd ~/monitoring-stack


Install Node Exporter

cd exporters
wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz
tar xvfz node_exporter*.tar.gz
cd node_exporter-1.7.0.linux-amd64
./node_exporter &


Install Prometheus

cd ~/monitoring-stack/prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.53.0/prometheus-2.53.0.linux-amd64.tar.gz
tar xvf prometheus*.tar.gz
cd prometheus-2.53.0.linux-amd64


Edit prometheus.yml

global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['localhost:9100']


Start Prometheus

./prometheus --config.file=prometheus.yml &


Access Prometheus

Go to browser: http://<EC2-IP>:9090

Check metrics: http://<EC2-IP>:9100/metrics

✅ You now have Prometheus collecting EC2 metrics.

📊 Phase 2 — Grafana Visualization
🎯 Objective

Install Grafana and connect it to Prometheus.

🔧 Steps
cd ~/monitoring-stack/grafana
docker run -d -p 3000:3000 --name=grafana grafana/grafana


Then:

Open http://<EC2-IP>:3000

Login → admin/admin

Add Data Source → Prometheus → http://<EC2-IP>:9090

Import dashboard → ID: 1860 (Node Exporter Full)

✅ Grafana dashboards now show EC2 metrics.

🚨 Phase 3 — Alerting Setup (Prometheus + Alertmanager)
🎯 Objective

Create alert rules (CPU > 80%) and route via Alertmanager.

🔧 Steps

Create alert rules (prometheus/alerts.yml)

groups:
  - name: system_alerts
    rules:
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High CPU usage on {{ $labels.instance }}"
          description: "CPU usage > 80% for 2m"


Configure Alertmanager

route:
  receiver: 'email-alert'

receivers:
  - name: 'email-alert'
    email_configs:
      - to: 'your@email.com'
        from: 'alert@example.com'


Link Alertmanager to Prometheus

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - 'localhost:9093'
rule_files:
  - "alerts.yml"


✅ You’ll now see alerts firing in Prometheus UI.

🧩 Phase 4 — Integrate Nagios Alerts into Prometheus
🎯 Objective

Expose Nagios alerts to Prometheus via exporter/webhook.

🔧 Option 1: Use nagios_exporter
docker run -d -p 9115:9115 --name=nagios-exporter -e NAGIOS_URL=http://nagios-server/nagiosxi -e NAGIOS_USER=admin -e NAGIOS_PASS=password nagios_exporter


Then add target in Prometheus:

- job_name: 'nagios'
  static_configs:
    - targets: ['localhost:9115']


✅ Prometheus will scrape Nagios alerts too.

🔄 Phase 5 — Dynamic Service Discovery
🎯 Objective

Enable Prometheus to auto-discover new EC2 or Kubernetes services.

🏗️ Example (EC2 SD)
- job_name: 'ec2_instances'
  ec2_sd_configs:
    - region: us-east-1
      access_key: <ACCESS_KEY>
      secret_key: <SECRET_KEY>
  relabel_configs:
    - source_labels: [__meta_ec2_private_ip]
      target_label: instance


✅ Now new EC2s automatically appear in Prometheus.

🔐 Phase 6 — Secure Observability Endpoints
🎯 Objective

Enable HTTPS + Basic Auth + OAuth proxy

Options:

Use NGINX reverse proxy with Basic Auth

Or Grafana Cloud / OAuth2 Proxy for SSO

Example NGINX snippet:

server {
    listen 443 ssl;
    server_name monitoring.example.com;

    ssl_certificate /etc/ssl/certs/ssl-cert.pem;
    ssl_certificate_key /etc/ssl/private/ssl-key.pem;

    location / {
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://localhost:9090;
    }
}


✅ Now access Prometheus securely via HTTPS with login.

⚙️ Phase 7 — GitOps for Dashboard & Config Management
🎯 Objective

Automate Grafana & Prometheus configs from GitHub.

Store all YAMLs & JSON dashboards in Git

Use Grafana provisioning via YAML:

apiVersion: 1
providers:
  - name: 'Dashboards'
    options:
      path: /var/lib/grafana/dashboards


Use CI/CD (GitHub Actions) to auto-sync dashboards:

- name: Deploy Grafana Dashboards
  run: |
    scp dashboards/* grafana@<EC2-IP>:/var/lib/grafana/dashboards/


✅ Fully automated observability stack deployment 🎯

🧠 Phase 8 — Interview Story You Can Tell

“I designed and implemented a full observability stack on AWS EC2.
Prometheus collected metrics from 200+ microservices using EC2 service discovery.
Grafana was used for visualization, with dashboards provisioned via GitOps.
I integrated legacy Nagios alerts through exporters, secured all endpoints using NGINX TLS + Basic Auth,
and automated alert routing through Alertmanager.”